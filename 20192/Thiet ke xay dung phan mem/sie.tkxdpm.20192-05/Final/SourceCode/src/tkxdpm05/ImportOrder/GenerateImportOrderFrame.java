/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tkxdpm05.ImportOrder;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import tkxdpm05.models.importorder.ImportOrderDTO;
import tkxdpm05.models.provide.ProvideDTO;
import tkxdpm05.models.saleorder.SaleOrderDTO;
import tkxdpm05.models.saleorder.SaleOrderDetailDTO;

/**
 *
 * @author thiennd
 */
public class GenerateImportOrderFrame extends javax.swing.JFrame {

    /**
     * Creates new form GenerateImportOrderFrame
     */
    ArrayList<SaleOrderDTO> listSaleOrderDTOs;
    DefaultTableModel tableSaleOrderModel;

    ArrayList<ImportOrderDTO> listImportOrderDTOs;
    DefaultTableModel tableImportOrderModel;

    ArrayList<ProvideDTO> listProvideDTOs;
    ArrayList<SaleOrderDetailDTO> listSaleOrderDetailDTOs;

    String[] tableSaleOrderHeader = new String[]{"Sale Order ID", "Delivery", "Status"};
    String[] tableImportOrderHeader = new String[]{"ID", "Sale Order ID", "Status", "Delivery", "Site ID", "Merchandise ID", "Quantity"};

    public GenerateImportOrderFrame() {
        initComponents();
        initUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableSaleOrder = new javax.swing.JTable();
        btnGenerate = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableImportOrder = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnDiscard = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableSaleOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableSaleOrder);

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        tableImportOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tableImportOrder);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnDiscard.setText("Discard");
        btnDiscard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDiscardActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDiscard, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(79, 79, 79)
                            .addComponent(btnGenerate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(0, 0, 0)
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnDiscard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(159, 159, 159))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        int index = tableSaleOrder.getSelectedRow();
        if (index < 0) {
            tableImportOrderModel = new DefaultTableModel(tableImportOrderHeader, 0);
            tableImportOrder.setModel(tableImportOrderModel);
            return;
        }
        if (listSaleOrderDTOs.get(index).getStatus().equals("GENERATED")) {
            showListImportOrder(index);
        } else {
            listImportOrderDTOs = ImportOrderController.getInstance().generateImportOrder(listSaleOrderDTOs.get(index));
            showGeneratedImportOrder();
        }
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        for (ImportOrderDTO importOrder : listImportOrderDTOs) {
            if (importOrder.getImportOrderId() == -1) {
                ImportOrderController.getInstance().createImportOrder(importOrder);
            }
        }
        for (SaleOrderDTO saleOrder : listSaleOrderDTOs) {
            if (saleOrder.getSaleOrderId() == listImportOrderDTOs.get(0).getSaleOrderId()) {
                saleOrder.setStatus("GENERATED");
                ImportOrderController.getInstance().updateSaleOrder(saleOrder);
                break;
            }
        }
        btnGenerateActionPerformed(null);
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        initUI();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnDiscardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiscardActionPerformed
        initUI();
    }//GEN-LAST:event_btnDiscardActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenerateImportOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenerateImportOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenerateImportOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenerateImportOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GenerateImportOrderFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDiscard;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableImportOrder;
    private javax.swing.JTable tableSaleOrder;
    // End of variables declaration//GEN-END:variables

    private void initUI() {
        this.setTitle(this.getClass().getSimpleName());
        this.setDefaultCloseOperation(HIDE_ON_CLOSE);
        showListSaleOrder();

    }

    private void showListSaleOrder() {
        tableSaleOrderModel = new DefaultTableModel(tableSaleOrderHeader, 0);
        tableSaleOrder.setModel(tableSaleOrderModel);

        listSaleOrderDTOs = ImportOrderController.getInstance().readAllSaleOrder();

        for (SaleOrderDTO saleOrderDTO : listSaleOrderDTOs) {
            String[] data = new String[3];
            data[0] = saleOrderDTO.getSaleOrderId() + "";
            data[1] = saleOrderDTO.getDeliveryDesired();
            data[2] = saleOrderDTO.getStatus();
            tableSaleOrderModel.addRow(data);
        }
    }

    private void showListImportOrder(int index) {
        tableImportOrderModel = new DefaultTableModel(tableImportOrderHeader, 0);
        tableImportOrder.setModel(tableImportOrderModel);

        listImportOrderDTOs = ImportOrderController.getInstance().readAllImportOrder();

        for (ImportOrderDTO importOrderDTO : listImportOrderDTOs) {
            if (importOrderDTO.getSaleOrderId() == listSaleOrderDTOs.get(index).getSaleOrderId()) {
                String[] data = new String[7];
                data[0] = importOrderDTO.getImportOrderId() + "";
                data[1] = importOrderDTO.getSaleOrderId() + "";
                data[2] = importOrderDTO.getStatus() + "";
                data[3] = importOrderDTO.getDeliveryMean() + "";
                data[4] = importOrderDTO.getSiteId() + "";
                data[5] = importOrderDTO.getMerchandiseId() + "";
                data[6] = importOrderDTO.getQuantity() + "";
                tableImportOrderModel.addRow(data);
            }
        }
    }

    private void showGeneratedImportOrder() {
        if (listImportOrderDTOs.size() == 0) {
            JOptionPane.showMessageDialog(this, "Not enoug merchandise instock");
            return;
        }
        tableImportOrderModel = new DefaultTableModel(tableImportOrderHeader, 0);
        tableImportOrder.setModel(tableImportOrderModel);

        for (ImportOrderDTO importOrderDTO : listImportOrderDTOs) {
            String[] data = new String[7];
            data[0] = "AUTO GENERATE";
            data[1] = importOrderDTO.getSaleOrderId() + "";
            data[2] = importOrderDTO.getStatus() + "";
            data[3] = importOrderDTO.getDeliveryMean() + "";
            data[4] = importOrderDTO.getSiteId() + "";
            data[5] = importOrderDTO.getMerchandiseId() + "";
            data[6] = importOrderDTO.getQuantity() + "";
            tableImportOrderModel.addRow(data);

        }
    }

}
