% run initialization init% main algorithmwhile t<T  % spatial discretization     [dHx dHy] = get_differential_2D(H,hx,hy);  [dUx dUy] = get_differential_2D(U,hx,hy);  [dVx dVy] = get_differential_2D(V,hx,hy);      FU = f.*V - U.*dUx - V.*dUy - g.*dHx;  FV = - f.*U - U.*dVx - V.*dVy - g.*dHy;  FH = - U.*dHx - H.*dUx - V.*dHy - H.*dVy;    %FU = f.*V - g.*dHx;  %FV = - f.*U - g.*dHy;    %FH = - H0.*dUx - H0.*dVy;  % update value     H = H + FH.*ht;  U = U + FU.*ht;  V = V + FV.*ht;      % time intergration    t = t + ht;  figure(1), clf;  mesh(H);  title(['t = ' num2str(t)])  xlabel('X');  ylabel('Y');  zlabel('Z');    pause(0.1);  endwhile