clear;clc;function [dx dy] = get_differential_2D(F,hx,hy)  X = size(F,1);  Y = size(F,2);  dx = zeros(size(F));  dy = zeros(size(F));  for i=1:X    for j=1:Y      if i==X        %dx(i,j) = (F(1,j) - F(i,j)) / hx;        dx(i,j) = 0;      else        dx(i,j) = (F(i+1,j) - F(i,j)) / hx;      endif          if j==Y        %dy(i,j) = (F(i,1) - F(i,j)) / hy;        dy(i,j) = 0;      else        dy(i,j) = (F(i,j+1) - F(i,j)) / hy;      endif    endfor;  endfor;  endfunction% constantg = 9.81;f = 10^-4;% init value for U V H and its differentialD = 4400000;L = 4400000;hx = 4*11/7*10^4;hy = 4*11/7*10^4;x = hx:hx:L;y = hy:hy:L;H0 = 20000;H1 = 4400;H2 = 2660;y0 = 6.*hx;H = zeros(size(x,2),size(y,2));for i=1:size(x,2);  for j=1:size(y,2);    H(i,j) = H0 + H1.*tanh(9.*(y(j).-y0)/(2.*D)) + H2.*sin(2.*pi.*x(i))/(cosh((9.*y(j)-y0)/D).*cosh((9.*y(j)-y0)/D));  endfor;endfor;[dHx dHy] = get_differential_2D(H,hx,hy);  U = -1/f.*dHy;V = 1/f.*dHx;% init time variable t = 1;ht = 300;T = ht*200;% main function figure(1);mesh(H);xlabel('X');ylabel('Y');zlabel('Z');figure(2);mesh(dHx);xlabel('X');ylabel('Y');zlabel('Z');figure(3);mesh(dHy);xlabel('X');ylabel('Y');zlabel('Z');while t<T    fprintf("range H: \n");  max(max(H))  min(min(H))  fprintf("range U: \n");  max(max(U))  min(min(U))  fprintf("range V: \n");  max(max(V))  min(min(V))    % plotting     figure(1);  mesh(H);  xlabel('X');  ylabel('Y');  zlabel('Z');  title('H');  figure(2);  mesh(dHx);  xlabel('X');  ylabel('Y');  zlabel('Z');  title('dHx');  figure(3);  mesh(dHy);  xlabel('X');  ylabel('Y');  zlabel('Z');  title('dHy');      % spatial discretization     [dHx dHy] = get_differential_2D(H,hx,hy);  [dUx dUy] = get_differential_2D(U,hx,hy);  [dVx dVy] = get_differential_2D(V,hx,hy);    % time intergration  FH = -U.*dHx - H.*dUx - V.*dHy - H.*dVy;    FU = f.*V - U.*dUx - V.*dUy - g.*dHx;  FV = -f.*U - U.*dVx - V.*dVy - g.*dHy;  %FU = f.*V - g.*dHx;  %FV = - f.*U - g.*dHy;  %FH = - H0.*dUx - H0.*dVy;  % update value     U = U + FU.*ht;  V = V + FV.*ht;  H = H + FH.*ht;    % time step     t  t = t + ht;  pause(0.1);      endwhile